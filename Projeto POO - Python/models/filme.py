from models.titulo import Titulo

class Filme(Titulo):

    catalogo_de_filmes = []

    def __init__(self, nome, ano_de_lancamento, tempo_de_duracao, categoria, sinopse, diretor, estudio):
        super().__init__(nome, ano_de_lancamento, tempo_de_duracao, categoria, sinopse)
        self._diretor = diretor
        self._estudio = estudio
        self._avaliacoes = []
        Filme.catalogo_de_filmes.append(self)

    def __str__(self) -> str:
        """Esta fun√ß√£o retorna uma representa√ß√£o em string do filme com algumas informa√ß√µes importantes"""
        return f'Nome: {self._nome} | Ano de Lan√ßamento: {self._ano_de_lancamento}'
    
    def avaliar(self, nota) -> None:
        """Esta fun√ß√£o atribui uma nota a lista de avalia√ß√µes do objeto e n√£o possui retorno"""
        if type(nota) == float or type(nota) == int:
            if nota < 0 or nota > 10:
                print('Nota inv√°lida. Verifique se a nota digitada pertence ao intervalo de 0 a 10')
                print('Por favor, tente novamente mais tarde.')
            else:
                self._avaliacoes.append(nota)
        else:
            print('Erro. Por favor, digite um valor real para a atribui√ß√£o da nota')

    @property
    def getnome(self):
        return self._nome
    
    @property
    def getanodelancamento(self):
        return self._ano_de_lancamento
    
    @property
    def gettempodeduracao(self):
        return self._tempo_de_duracao

    @property
    def getcategoria(self):
        return self._categoria
    
    @property
    def getsinopse(self):
        return self._sinopse
    
    @property
    def getdiretor(self):
        return self._diretor
    
    @property
    def getestudio(self):
        return self._estudio

    @property
    def getclassificacao(self) -> float:
        """Esta fun√ß√£o calcula a m√©dia de avalia√ß√µes da lista de avalia√ß√µes e retorna o resultado"""
        if not self._avaliacoes:
            return 'Nenhuma avalia√ß√£o registrada no momento üòï'
        return sum(self._avaliacoes) / len(self._avaliacoes)

    # Criar uma classmethod para listar todos os filmes do cat√°logo

    @classmethod
    def listar_filmes(cls) -> None:
        """Esta fun√ß√£o lista todos os filmes j√° registrados e n√£o possui retorno"""
        print(f'{"Nome".ljust(25)} | {"Ano de Lan√ßamento".ljust(25)} | {"G√™nero Principal".ljust(25)}')
        for filme in cls.catalogo_de_filmes:
            print(f'{filme._nome.ljust(25)} | {str(filme._ano_de_lancamento).ljust(25)} | {filme._categoria[0].ljust(25)}')

    # Montar uma ficha t√©cnica do filme, de modo a exibir todas as informa√ß√µes do filme

    def exibir_ficha_tecnica(self) -> None:
        """Esta fun√ß√£o exibe a ficha t√©cnica completa de um filme e n√£o possui retorno"""
        print('-=' * 35)
        print(f'Filme: {self._nome}')
        print(f'Ano: {self._ano_de_lancamento}')

        print(f'G√™nero: ', end='')
        generos = self._categoria
        for i in range(len(generos)):
            if i == len(generos) - 1:
                print(f'{generos[i]}', end='')
            else:
                print(f'{generos[i]} ‚óè ', end='')

        print(f'\nDiretor: {self._diretor}')
        print(f'St√∫dio: {self._estudio}')
        print(f'Sinopse: {self._sinopse}')
        print('-=' * 35)
    
    def serializar_objeto(self):
        return {
            "nome": self.getnome,
            "ano_de_lancamento": self.getanodelancamento,
            "tempo_de_duracao_em_minutos": self.gettempodeduracao,
            "categorias": self.getcategoria,
            "sinopse": self.getsinopse,
            "diretor": self.getdiretor,
            "estudio": self.getestudio,
            "nota": self.getclassificacao,
        }


filme1 = Filme('O Poderoso Chef√£o', 1972, 175, ['Crime', 'A√ß√£o', 'Cl√°ssico'], 'Uma fam√≠lia mafiosa luta para estabelecer sua supremacia nos Estados Unidos depois da Segunda Guerra Mundial. Uma tentativa de assassinato deixa o chef√£o Vito Corleone incapacitado e for√ßa os filhos Michael e Sonny a assumir os neg√≥cios.', 'Francis Ford Coppola', 'Paramount Pictures')
filme1.avaliar(10)
filme1.avaliar(9.75)
filme1.avaliar(9.50)

filme2 = Filme('Matrix', 1999, 136, ['A√ß√£o', 'Sci-Fi', 'Cyberpunk'], 'Um hacker aprende com os misteriosos rebeldes sobre a verdadeira natureza de sua realidade e seu papel na guerra contra seus controladores.', 'Lana Wachowski', 'Warner Bros. Entertainment')
filme2.avaliar(9.0)
filme2.avaliar(8.5)
filme2.avaliar(9.50)

filme3 = Filme('Oppenheimer', 2023, 180, ['Drama', 'History', 'Biografia'], 'A hist√≥ria do cientista americano J. Robert Oppenheimer e seu papel no desenvolvimento da bomba at√¥mica.', 'Christopher Nolan', 'Universal Studios')
filme3.avaliar(9.0)
filme3.avaliar(8.0)
filme3.avaliar(8.8)
